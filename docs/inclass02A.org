#+TITLE: SWE 619 In Class Exercise Number 2A

#+HTML_HEAD: <link rel="stylesheet" href="https://nguyenthanhvuh.github.io/files/org.css">
#+HTML_HEAD: <link rel="stylesheet" href="https://nguyenthanhvuh.github.io/files/org-orig.css">

* Instructions

  Consider a simple generic =Queue= implementation.
  #+begin_src java

    public class Queue <E> {

       private List<E> elements;
       private int size;

       public Queue() {   
          this.elements = new ArrayList<E>();
          this.size = 0;
       }

       public void enQueue (E e) {
         elements.add(e);
         size++;
       }

       public E deQueue () {
         if (size == 0) throw new IllegalStateException("Queue.deQueue");
         E result = elements.get(0);
         elements.remove(0);
         size--;
         return result;
       }

       public boolean isEmpty() {
          return size == 0;
       }
    }

  #+end_src

  1. Rewrite =Queue= to be *immutable*. Keep the representation variables =elements= and =size=.
  1. Do the right thing with =enQueue()=.
  1. Do the right thing with =deQueue()=.

* Links
  - [[./index.html][Syllabus]]
  - [[./schedule.html][Schedule]]

