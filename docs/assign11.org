#+TITLE: SWE 619 Assignment 11

#+HTML_HEAD: <link rel="stylesheet" href="https://nguyenthanhvuh.github.io/files/org.css">

* Goals: Applying lessons learned. 

  You have a choice of possible assignments:

  1. Consider one of the =copyOf()= methods in the Java [[https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html][Arrays]] utility class. Bloch uses this method in his =Stack= example. Code a corresponding method in C++, changing the argument list as necessary. Provide a specification for the C++ code by translating the JavaDoc and adding preconditions as necessary. Explain what this exercise demonstrates about C++ type safety.

  1. For most of the semester, we have focused on design considerations for constructing software that does something we want it to do. For this last assignment, I would like students to appreciate just how vulnerable software is to malicious parties intent on attacking their software.
     # Students who find this assignment amusing might wish to take ISA/SWE 681: Secure Software Design and Programming.
     
     There are two attacks documented in Bloch's Item 88: /Write =readObject()= methods defensively/. One is called =BogusPeriod=, and the other is called =MutablePeriod=. Implement either (your choice) of these attacks (basically involves typing in code from Bloch) and verify that the attack takes place.

  1. A different source of security vulnerabilities in Java also involve serialization. Bloch (and others) recommend "cross-platform structured data representations" (e.g. JSON or Protocol Buffers) as safe alternatives. Develop a simple serialization example in Java and convert it into a safe alternative (probably, JSON is easier to use, since it is text-based). To make the example more interesting, use some objects types that are not directly supported.

  1. Find some existing (Java) code that uses the "int enum pattern" and refactor it to use Java =Enums= instead. Identify any type-safety issue you uncover in the existing code. To make the exercise interesting, extend your enums beyond simple named-constants in one of the ways discussed by Bloch in Item 34. 

  1. Where appropriate, code up, as JUnit theories, constraints for classes that implement the Java =Comparable= interface. Note that there is significant overlap with the in-class exercise. Note also that the Comparable interface is generic; hence, you should use generics in your JUnit test class.

  1. Gain experience with one of the property-based testing tools. I suggest a Java-based one (such as [[https://jqwik.net][jqwik]]). One way to do this is work through one of the articles linked on the jqwik site.


  
* Grading Criteria
  In each case, the deliverable is a story. Write a brief report, and include enough evidence (output, screen shots, etc.) that the GTA can figure out that you actually completed the assignment.



* Links
  - [[./index.html][Syllabus]]
  - [[./schedule.html][Schedule]]

