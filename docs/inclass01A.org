#+TITLE: SWE 619 In Class Exercise Number 1A 

#+HTML_HEAD: <link rel="stylesheet" href="https://nguyenthanhvuh.github.io/files/org.css">
#+HTML_HEAD: <link rel="stylesheet" href="https://nguyenthanhvuh.github.io/files/org-orig.css">

* Instructions

  Consider the following specification and implementation:

  #+begin_src java

    public static List<Integer> tail (List<Integer> list) {

       // REQUIRES: ???
       // EFFECTS:  ???

       List<Integer> result = new ArrayList<Integer>(list);
       result.remove(0);
       return result;
    }
  #+end_src
  
  1. What does the *implementation* of =tail= do in each of the following cases? How do you know: Running the code or reading an API description?
    - =list = null= 
    - =list = []=
    - =list = [1]= 
    - =list = [1, 2, 3]=
  1. Write a partial specification that matches the "happy path" part of the implementation's behavior. 
  1. Rewrite the specification to be total. Use Bloch's standard exceptions. 
  1. The resulting specification has a problem. What is it? 
  1. Rewrite the specification to address this problem. Rewrite the code to match the new specification. 

* Links
  - [[./index.html][Syllabus]]
  - [[./schedule.html][Schedule]]

