#+TITLE: SWE 619 
#+OPTIONS: ^:nil toc:1

#+HTML_HEAD: <link rel="stylesheet" href="https://nguyenthanhvuh.github.io/files/org.css">
#+HTML_HEAD: <link rel="alternative stylesheet" href="https://nguyenthanhvuh.github.io/files/org-orig.css">

* Quiz 3:

** Immutatiblity

  Consider a partial version of Bloch's mutable Stack class:
  #+begin_src java
    public class Stack {

        private Object[] elements;
        private int size = 0;

        public Stack() { this.elements = new Object[0]; }

        public void push (Object e) {
            ensureCapacity();      // implementation omitted from quiz
            elements[size++] = e;
        }

        public Object pop () {
            if (size == 0) throw new IllegalStateException("Stack.pop");
            Object result = elements[--size];
            elements[size] = null;
            return result;
        }
    }

  #+end_src
  Also consider the following client interaction with Stack
  #+begin_src java
    Stack s = new Stack();
    s.push("cat");
    s.push("dog");
    System.out.println(s.pop());

  #+end_src
  - What methods would be needed to convert the client interaction into an equivalent interaction with an immutable version called IStack? For each method, give *just the method header* - not the contract or implemetation. 

** Verification using Hoare Logic
  Given the program
   #+begin_src java
     // {x <= 10}   # P  
     while (x != 10){
       x := x + 1;
     }
     //{x == 10}  # Q
   #+end_src
  
  1. Informally reason that this program is correct with the given =P= and =Q=.
  1. Find a loop invariant and prove that the program is correct (show your work, i.e., generate the =wp= and the =vc= of the program, and reason about these)     
  
*  Quiz 4:
  
1. Consider the following (supposedly) immutable class:

   #+begin_src java
     public final class Immutable { 
         private final String string;
         private final int x;
         private final List<String> list;

        public Immutable(String string, int x, List<String> list) {
           this.string = string;                     // Line A
           this.x = x;                               // Line B
           this.list = new ArrayList<String> (list); // Line C
        }

        public getString() { return string; }  // Line D
        public getInt()    { return x; }       // Line E
        public getList()   { return list; }    // Line F
     }
   #+end_src

Mark whether each line of code is a problem w.r.t. the immutability of class Immutable. 

- Line A:    ____ Yes   ____ No   
- Line B:    ____ Yes   ____ No   
- Line C:    ____ Yes   ____ No   
- Line D:    ____ Yes   ____ No   
- Line E:    ____ Yes   ____ No   
- Line F:    ____ Yes   ____ No  


2. Write pseudo-code that compromises the immutability of the Immutable class. 


        
