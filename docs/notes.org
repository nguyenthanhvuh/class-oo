#+TITLE: SWE 419 Notes
#+OPTIONS: ^:nil toc:1

#+HTML_HEAD: <link rel="stylesheet" href="https://dynaroars.github.io/files/org.css">
#+HTML_HEAD: <link rel="alternative stylesheet" href="https://dynaroars.github.io/files/org-orig.css">

* Lecture 5 (<2022-09-30 Fri>)

{y=7} x:=3 {x + y = 10)   y=7 is the weakest precondition

{y=7 AND x= 100} x:=3 {x + y = 10)


WP(x := E, Q) = Q[x/E]
WP(x:=3 , x +y = 10)  
=  x +y = 10[x/3]
=  3 +y = 10
=  y = 7

WP(z:=3, z + y > 0)
= 3 +y > 0
{3+y >0} z := 3 {z + y >0}



WP([x:=x+1; y:=y*x], y = 2*z)
= WP(x:=x+1, WP(y:=y*x, y=2*z))
= WP(x:=x+1,  y*x = 2*z)
= y*(x+1)=2*z

WP(if b then S1 else S2, Q)  =  (b => WP(S1,Q))  &  (!b => WP(S2, Q))

WP(if x > 0 then y := x + 2  else y := y + 1,  y > x)
x > 0 => WP(y:=x+2, y>x)  & x<=0 => WP(y:=y+1, y>x)
x > 0 => x+2 > x    & x<=0 => WP(y:=y+1, y>x)
x > 0 => True       & x<=0 => WP(y:=y+1, y>x)
True                & x<=0 => WP(y:=y+1, y>x)
x<=0 => WP(y:=y+1, y>x)
x<=0 => y+1 > x


// {N >= 0}  #P
i = 0;
while (i < N){
    i = i + 1;
}
//{i == N}  #Q


WP([i:=0; while(i<N) do i:=i+1], i=N)
WP(i:=0,  WP(while(i<N) do i:=i+1, i=N))

WP(while [I] b do S, Q) =  I & (I & b => WP(S,I) & (I & !b)  => Q)
let I =   *i<=N*

WP(while(i<N) do i:=i+1, i=N)
= i<=N  &  i<N => WP( i:=i+1, i<=N)  & (i<=N & i>=N)  => i=N
= i<=N  &  i<N => i+1 <= N    &  i=N  => i=N
= i<=N  &  i<N => i+1 <= N    &  True
= i<=N  &  i<N => i+1 <= N

= i<=N  &  i<=N-1 => i+1 <= N
= i<=N  &  i<=N-1 => i =N -1
= i<=N  &  True
= i<=N  

WP(i:=0, WP(while(i<N) do i:=i+1, i=N))
WP(i:=0, i<=N)
= 0<=N

verification condition (vc)
P => WP([i:=0; while(i<N) do i:=i+1], i=N,Q)
P => 0<=N
N >= 0   =>  0 <= N
True  (i.e.,   program is correct wrt to P and Q)

P1 => 0<=N
N >= 1   =>  0<=N   
True  (i.e.,   program is correct wrt to P and Q)

P2 => 0<=N
True => 0<=N
0<=N



--
let I = true
WP(while [I] b do S, Q) =  I & (I & b => WP(S,I) & (I & !b)  => Q)
WP(while(i<N) do i:=i+1, i=N)
= True &    True & i<N => WP(i:=i+1, True) &    (True & i>=N)  => i=N
= True &    True & i<N => True  &    (True & i>=N)  => i=N
= (True & i<N) => True    &     (i>=N  => i=N)
= (i<N => True)  &   (i>=N  => i=N)
=     i>=N       &   (i>=N  => i=N)


WP(i:=0, i>=N   & (i>=N  => i=N))
0>=N  &  (0>=N  =>  0=N)


VC
P => 0>=N  &  (0>=N  =>  0=N)
N>=0   =>  0>=N  &  (0>=N  =>  0=N)
Not simplified to True



{True} i:=i+1  {True}

Q[x/E]
True[i/i+1]
True

WP(i:=i+1,  x=10)
x=10[i/i+1]
x=10

{x=10} {i:=i+1} {x=10}



// {N >= 0}   # P
i = 0;
while (i < N){
    i = i + 1;
}

// {N >= 0}   # P
i = 0;
while (1){
    [I]  // 
    if (!(i < N)) break;
    i = i + 1;
}


2. i<=N ... loop inv
3. i>=0  ... loop inv


** Repr Invariants
- things that are true about a data structure
- binary tree 
  - at most two children
  - all nodes except root has a parent
 
- BinTree
  - add(x)
  -

- Set
  - Distinct
      
- BinarySearchTree
  -     

ReprOK()
RepOK()

* Lecture 4 (<2022-09-16 Fri>)

** No class next Friday
   - will send out details later

** Topic: Automatic Verification
- Logic

  a => b   :  !a OR b
  
  - there is class next Friday :   False
  - today is September 16:  True

  1. x > 6 and x < 5  : False  (no value of x would satisfy this)
  2. x > 6  =>  x > 1   :  True
  3. x > 6  and  y = 3   :  False , counterxample(cex) : (x=5 , y=2)
  4. x > 6  =>  y = 3   :  False,       cex  : (x=7,  y=4)
    x <= 6  or  y = 3

  satisfiable:
    f :  satisfiable   if there is some assignment to the values in f that makes f evaluate to True
    - x <= 6 or y = 3  is satisfiable (e.g.,  x=4, y=4)
    - x > 6  and  y = 3 is SAT (e.g.,  x =7, y=3)  
    - x > 6  =>  x > 1   is SAT (e.g.,  x=7)
    - x > 6 and x < 5   is UNSAT

  valid (tautology):
    f : valid, if f evaluates to True for *every* assignment (f is *always* satisfiable)
    - x > 6  =>  x > 1   is valid
    - x = x  is valid

  falsification:
   f : is falsification if f elvalues to False for *every* assignment (f is *always* unsat)
   -  x > 6 and x < 5
   - x != x
   - x = x + 1   (if x = some infinite number, then x = x + 1 would True, so assume x is finite)


  Implication   a => b   =  !a or b
  
  - f => f      =  Valid    (!f or f)
  - f => True   =  Valid    (!f or True)
  - True => f   = Not Valid  !True or f  = False or f   =  f
  - f => False   =  Not Valid       !f or False   = !f
  - False => f  =  Valid      !False or f  =  True or f  = True
  
Hoare Verification
   - Tony Hoare: Sir. Hoare, quick sort, verification, ...
   - automatic verification that a program S is correct with respect to precondition P and postcondition Q


   - Hoare tripple
     {P}  S  {Q}
     - Precondition: P
     - Postcond :  Q
     - S :   program (statements)
     - Hoare tripple is valid: if P holds, and the successful execution of S results in Q
       - S is correct with respect to P and Q
     
        


   - Testing   S,   P , Q

     Goal: given a program S,  {P, Q},  check if S is correct wrt to P, Q
     - testing: finding some bug:  want to find if there is some (bad) input that satisfy P,  but doesn't satisy Q
       - pros: quick , test it on some finite number of inputs (K,M,B ..)
       - cons: if the test shows no bug, DOES NOT mean the program really has no bug
         
     - verification: want to show there exist no bad input that ... 
       - pros: if verify shows no bug,  DOES mean program has bug
       - cons: runs slowly (have to consider all possible inputs)


     - medical (surgeries), airplan, weapons, ...
     - Hardware design (CPU)
     - Airbus:  verification to check floating errors do not occur A380 ...
     - NASA:  Rovers  (symbolic execution)
     - Facebook Newsfeed :  verification (currency), Instagram
     - Amazon AWS :  cloud computing 
       
       
Examples of Hoare tripples

- {True} x := 5  {x=5}  : Valid HT # strongest post
- {True} x := 5  {x > 4} :  Valid HT
- {True}  x:= 5  {x=5 or x=6}  : Valid HT
# postcondition:  prefer strongest postcondition
# precondition: prefer weakest precondition




- {True}  x:= 5  {x > 5}  : Invalid HT

- {x = 1 & y = 2} z:= x/y  {z < 1}   : Valid
- {x < y} z:= x/y  {z < 1}   :   Invalid
- {False} x:=3 {x=8}  : Valid
- {True} while(1){x:=8} {x=3}  : Valid (Partial correct)
  - Partial () vs Total (you have to check that the program terminates)

- Halting problem
  - given a program, is it possible to determine if it will halt or not?
  - Alan Turing
    - Break Engima (10 years of WW-II)
    - Father of Computer Science
      - Show that Halting problem is undecidable
      - Turing machine - Universal Machine
      - Turing test
    - Matrix multiplication (LU-)
  - Halting: Undecidable problem
  

How to determine if Hoare Triple is valid or not?
- Compute *weakest* preconditions (WP)
- WP(S, Q) = P'

  
- Skip:WP(skip, {x=3})=  {x=3}
- Assignment:  
  - WP(x:=x+1, {x=3})= {x=2}
    - {x=2} x:= x+1 {x=3}
  - WP(x:=x+1, {x>3})= x>2
  - WP(x:=1, {x=3}) = False
    {False}  x:= 1 {x=3}  
- Condition
  - WP(if x > 0 then y := x + 2  else y:= y + 1,  {y > x})
    x>0  and   (x  < 0 -> y + 1 >x )
- While loop
  - loop invariant (I)
    - true when entering the loop
#+begin_src python
  while (b){
    # loop body
  }

  while (True){
    [I]      # loop invariant I is right here
    if (!b) break
      # loop body
  }
#+end_src
       
#+begin_src python
  {N >= 0} # precondition
  
  i := 0
  while(True):
    [L]
    if(!(i < N)):  # i >= N : break
        break
    i := N;
#+end_src       

i = i = True
N= N
i >= 0
i <= N   
      
* Lecture 3 (<2022-09-09 Fri>)
** Go over quiz 1

Binary_search(arrays, x)
- precondition:
  - arrays: sorted, cannot null, 
- postcondition:
  - if x not in arrays: raise someexception ...
  - ow: returns index of x in array
    
 * Recap:
   - Specification is NOT code/implementation (it is independent of implementation)
   - Do not look at implementation to write specification (you will write specification for that implementation); write specification FIRST !
   - Raise exceptions related to the undesirable input, e.g., if you don't want null, then raise something about NullPointerException.  If you don't want bad index to array, then use something about IndexOutOfBoundException. If you don't want some type of inputs, then raise IllegalArgumentException.

** Data Abstraction
Consider [[./files/Poly.java][Poly.java from Liskov]]
   - implements a class to represent ~polynomials~
  - 10*x + 5*x^2 + 3*x^3 + 100*x^11 + 42
  - 101
  - c_1*x_1^d_1 + c_2*x_2^d_2    (c_i*x_i^d_i : term,  c_i: coefficients, d_i: degree)


- This is a *specific* implementation of Polynomials
  - uses arrays of ints to represent terms ...
  - =deg= var to store degree

  - Some additional constraints for polynomials in this implementation
     - 1 variable (5*x*y not allowed)
     - no negative degree
     - coefficients integers

- to represent: =5 + 3*x^2= in this code
  - Poly(deg=2, trms=[5,3])   
  - Poly(deg=2, trms=[5,0,3]) 
    
  - Poly(deg=2, trms=[5,0,3,0,0,0,0,0...]): not allowed in Poly implementation (last element of the array term cannot be non zero)

    
- 1st =public Poly= contract: good (no inputs, not modifying any inputs etc)
- 2nd =public Poly= contract: also good, total contract: raise exception if n < 0, otherwise return this polynomial
- =private Poly=  :  she did not forget the contract, it is assumed that it will be called by something trusted , so no need to talk about specs of these.
- =deg=:  highest degree associated with a non-zero cofficient  
- =coeff_book()= vs =coeff()=  :  which is better? coeff() is better, go back to constructors:  if n < 0 , it throws IAE,  but this coeff_book returns a value (implicitly allow that)
...
- *abstraction method/function*: =toString=   -> concrete (implementation) to abstract (polynomial)
  -  Poly(deg=2, trms=[5,3])   =>  5+3*x
  -  Poly(deg=2, trms=[5,0,3]) =>  5+3x^2
  
*** Immutable
  - Thread safe ;  easier for sharing; efficiency; safety;  less prone to error, easier to design
  - really good for concurrency (can do things in parallel)

      
  - If modifies contents of the data, create a new one instead and also return the newly created one
  - In other words, it would not modify the contents of the data, instead of modifying the data internally,  it returns a new data (that would have same contents as data in the the mutable version)
  - In-class 3A

q = [1,2,3]
q.enQueue(4) #  q.elements = [1,2,3,4]

result = q.deQueue()
- q.elements = [2,3,4]
- result = 1

----------------

q = [1,2,3]
q' = q.enQueue_Immutable(4)  
- q.elements = [1,2,3]
- q'.elmenets = [1,2,3,4]
q = q'

q' = q.deQueue_Immutable()
result = q.getFirst()
q = q'
- q.elements = [2,3,4]
- result = 1  



  
q = [1,2,3]
q' = q.enQueue(4)
q' = [1,2,3,4]   Queue.elements=[1,2,3,4] , Queue.size=4
q = [1,2,3]

q = [1,2,3]
e = q.peek(); //e = 1
q' = q.deQueue();
q' = [2,3] 


*** 

*** Start talking about logic
    
* Lecture 2 (<2022-09-02 Fri>)

** Adminstrative: Groups
  - next time:  1 submission per group

** Reconsider In-class 1B (class =User=)
#+begin_src java
  User u1 = new u1("hello");
  User u2 = new User(null);
  u2.equals(u1); //contract:F, impl: F
  u1.equals(v2); //contract:F (Javadoc does not say it should raise exception), impl: exception

  //Q: how to fix this?
  //A: Check for null and return False
#+end_src  

** Another example on how to obtain specs from documentation
  - consider =remove= from =iterator=: https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html
    - Removes from the underlying collection the last element returned by this iterator (optional operation). This method can be called only once per call to next(). The behavior of an iterator is unspecified if the underlying collection is modified while the iteration is in progress in any way other than by calling this method.
    - Getting contracts/specs from the English description.
        - 1st sentence: postcondition, specifying behavior 
        - 2nd:  post  or detail implementation
        - 3rd:  post, side effects,  but could be a *precondition*:  statement that the collection should not be modified



** Method/Program specifications
  - Preconditions (=P=): assumptions, properties about the inputs
    - established by clients (e.g., inputs are strings, unsorted list, ...)
      
  - Postconditions (=Q=): properties/behaviors of the method/program (usually related inputs)
    - done/established by the developers/implementations (e.g., outputs are sorted list, ...)

  - When something goes wrong, who to blame?
    - If preconditions are incorrect: blame the clients
    - If preconditions are correct, and the postconditions are not correct: blame developers


** Weaker Preconditions and Stronger Postconditions
  
  - Reconsider the =intdiv= example from previous class
    
#+begin_src java
  int intdiv(int x, int y){
    /*
    Return the integer division result x/y. 

    preconds:
    - x and y are integers # (already given in type)
    // - y cannot be zero   # better if we can remove this

    postconds:
    - z is a number  # weak
    - z is an integer  # weak
    - z = x // y  # *strong*
    ,*/

    if (y == 0){ // raise ...
        
    }

    return z
  }
#+end_src

If we have ~S1 = P => Q~ and ~S2 = P' => Q'~, then 
- S1 is better than S2 :   if P is weaker than P'
- S1 is better than S2 :   if Q is stronger than Q'


** Total vs Partial contract
  - *partial* specification:  has a precondition
  - *total* specification:  has NO precondition

  - to turn a partial spec into a total spec:
    - for every precondition, remove and turn it into a new behavior in postcondition (of the form if not precondition, then do something, e.g., raising an excpetion)
      - E.g., if we have a precondition   =list= cannot be =null=
      - Then we remove that precondition
      - And create the postcondition:  if list is null then raise NullPointerExeception
   - in the implementation, create conditions and raise exception


** In-class 2
  1. null : gives NPE error null pointer
  2. []   : gives IOB error (result.remove())

  Happy Paths     
  3. [1]  : []         
  4. [1,2,3] :  [2, 3]


-  Partial Specs
  Preconds:
     - list not null
     - list not empty (list has at least 1 elem)
  Postconds:
     - return the tail of the original list

-  Total Specs
  Preconds: 
  Postconds:
     - raise NPE if list is null
     - raise  IllegalArgumentExcdeption if list is empty
     - return the tail of the original list
     -   
  
#+begin_src java
  public static List<Integer> tail (List<Integer> list) {

      // REQUIRES/PRECONDS: ???
      // EFFECTS/POSTCONDS:  ???

      if (list is null){
          raise NullPointerException;
      }
      if (list.size() == 0){
          raise IllegalArgumentException;
      }

      .....
  }
#+end_src  

- 
  
** In-class 2B (=tail= implementation)

    

* Lecture 1 (8/26)
** Administrative
- Syllabus
    
** Specification Example

Sorting (e.g., quicksort)
- Input: a list of integers numbers, e.g., [2,1,5,10]

- Output:  
  - *output is a permutation of input* and *output is in sored sorder (e.g., ascending)*
  
- Alg:
  - additional requirements, e.g., (involving pivot, worst case complexity n^2, amortized nlg n)
   
** Definitions 
Software Specifications (e.g., specification of a program/methoad/function)
 - *Preconditions*: properties of the Inputs
 - *Postconditions*: properties of the Outputs
   - Typically will have some relationships with the inputs
   
- Additional properties/specifications that are common for all software (desirable, but very hard to achieve)
  - secured
  - robust
  - bugs-free
  - efficiently
  
- Specification of a program: precondition + postcondition
- Correctness: A program (implementation) is *correct* if it satifies the given specifications (i.e., pre/post conditions).

** Another example

#+begin_src java
  int intdiv(int x, int y){
    /*
    precond: x and y are integers, y cannot be zero
    postcond: z = x // y
    ,*/


    return z
  }    
#+end_src



** In class Exercise (User, equals)
*** Truth table for Implication (=>)

| X | Y | X => Y |
|---+---+--------|
| T | T | T      |
| T | F | F      |
| F | T | T      |
| F | F | T      |

- Be careful about implication, the formula `X => Y` is only False when `X` is True but `Y` is False, in every other cases, the formula is True.


*** Expected properties for an implementation of `equals` (according to [[https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object)]])
1. reflexive: `a == a`
1. symmetry:   `a == b <=>  b == a`
1. transitive: `a == b && b == c  =>  a == c`
 

- Examples

#+begin_src java
User u1 = new User("hello");
User u2 = new User("world")
User u3 = new User("swe419");

User u1a = new User("hello");
User u1b = new User("hello");
User u2a = new User("world");

SpecialUser s1 = new SpecialUser("hello", 1)
#+end_src


For the equal implementation in In-class 1B for =User=.

- Reflexive: OK
  - e.g., =u1.equals(u1): contract: T   impl: T=

- symmetry: OK
  - e.g., =u1.equals(u2): False  && u2.equals(u1): False    contract: F   impl: F=
  - =u1.equals(u1a): T  && u1a.equals(u1): T  contract: T  impl: T=

- Transitive: OK
  - e.g., =u1.equals(u2) &&  u2.equals(u3) =>  u1.equals(u3) contract: T impl: T=, 
  - =u1.equals(u2a) &&  u2a.equals(u2b)  contract: T   impl: T=
          
          
Things become more complicated when involving inheritence

- Symmetry: Not OK
  - =u1.equals(s1)    impl:  T=
  - =s1.equals(u1)    impl:  F=

- A potential fix (suggested by a student)
  #+begin_src java
SpecialUser
      @Override public boolean equals (Object obj) {
      if (!(obj instanceof SpecialUser)) return super.equal(obj); //obj.equals(this)
       return super.equals(obj) && ((SpecialUser) obj).id == this.id;
      }

  #+end_src

