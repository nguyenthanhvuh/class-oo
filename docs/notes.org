<2022-02-07 Mon>
#+begin_src java
  public static int months (int principal, double rate, int payment){
      // Requires: principal, rate, and payment all positive and payment is sufficiently large to drive the principal to zero.
      // Effects:  return the number of months required to pay off the principal

  }
#+end_src


check vs unchecked exceptions
- Checked exception: exception that should be recoverable (and you should write code (try/catch...) to handle it)
- Unchecked exception: exceptrions that we cannot recover from / fatal errors   


Polynomial
- 10 
- ax + bx + 5
- 10x + 5x^2 - 4

- c_1*x_1^d_1 + c_2*x_2^d_2


- 5x*y  # does not allow in Poly implementation
- cannot have negative degree (allows deg >= 0)
- coefficients are integers

5+3*x^2
Poly(deg=2, trms=[5,3])    5+3*x
Poly(deg=2, trms=[5,0,3])  5+3x^2

Poly(deg=2, trms=[5,0,3,0,0,0,0,0...])  not allowed in Poly implementation

Abstraction
Abstract representation: 5+3*x
Concrete/Internal representation:
Poly(deg=2, trms=[5,0,3],
Poly(deg=2, trms=[5,0,3,0,0,0,0,0...]))

toString()

#+begin_src java
  public class Poly {
      private int[] trms;
      private int deg;

      // Effects: Initializes this to be the zero polynomial
      public Poly() {
         trms = new int[1]; trms[0] = 0;
         deg = 0;
      }

      // Effects: If n < 0 throws IllegalArgumentException
      // else initializes this to be the polynomial c*x^n
      public Poly(int c, int n) throws IllegalArgumentException {
         if (n < 0) {
            throw new IllegalArgumentException("Poly(int, int) constructor");
         }
         if (c == 0) {
            trms = new int[1]; trms[0] = 0;
            deg = 0;
            return;
         }
         trms = new int[n+1];
         for (int i=0; i < n; i++) {
            trms[i] = 0;
         }
         trms[n] = c;
         deg = n;
      }

      private Poly (int n) {
         trms = new int[n+1];
         deg = n;
      }

      // Effects: returns the degree of this
      public int degree() {
         return deg;
      }

      // Effects: returns the coefficent of the term of this whose exponent is d
      public int coeff_book(int d){
          if (d < 0 || d > deg) return 0 else return terms[d];
      }
    
      // @throws IAE if d < 0
      // Effects: returns the coefficent of the term of this whose exponent is d
      public int coeff(int d) {
         if (d < 0) throw new IAE();
         return (d > deg) ? 0 : trms[d];
      }

      // Effects: If q is null throw NullPointerException
      // else return the Poly this - q
      public Poly sub(Poly q) throws NullPointerException {
         return add(q.minus());
      }

      // Effects: return the Poly -this
      public Poly minus() {
         Poly r = new Poly(deg);
         for (int i=0; i <= deg; i++) {
            r.trms[i] = -trms[i];
         }
         return r;
      }

      // Effects: If q is null throw NullPointerException
      // else return the Poly this + q
      public Poly add(Poly q) {
         Poly la, sm;
         if (deg > q.deg) {
            la = this; sm = q;
         }
         else {
            la = q; sm = this;
         }
         int newdeg = la.deg;
         if (deg == q.deg) {
            for (int k = deg; k > 0; k--) {
               if (trms[k] + q.trms[k] != 0) {
                  break;
               }
               else {
                  newdeg--;
               }
            }
         }
         Poly r = new Poly(newdeg);
         int i;
         for (i = 0; i <= sm.deg && i <= newdeg; i++) {
             r.trms[i] = sm.trms[i] + la.trms[i];
         }
         for (int j = i; j <= newdeg; j++) {
            r.trms[j] = la.trms[j];
         }
         return r;
      }

      // Effects: If q is null throw NullPointerException
      // else return the Poly this * q
      public Poly mul(Poly q) throws NullPointerException {

         if ((q.deg == 0 && q.trms[0] == 0) || (deg == 0 && trms[0] == 0)) {
            return new Poly();
         }

         Poly r = new Poly(deg + q.deg);
         r.trms[deg + q.deg] = 0;
         for (int i = 0; i <= deg; i++) {
            for (int j = 0; j <= q.deg; j++) {
               r.trms[i+j] += trms[i]*q.trms[j];
            }
         }
         return r;
      }

      public String toString() {
         String r = "Poly:";

         if (deg == 0 || trms[0] != 0) {
             r += " " + trms[0];
         }

         for (int i = 1; i <= deg; i++) {
            if (trms[i] < 0) {
               r += " - " + -trms[i] + "x^" + i;
            }
            else if (trms[i] > 0) {
               r += " + " +  trms[i] + "x^" + i;
            }
         }
         return r;
      }
  }
#+end_src


q = [1,2,3]
q' = q.enQueue(4)
q' = [1,2,3,4]   Queue.elements=[1,2,3,4] , Queue.size=4
q = [1,2,3]

q = [1,2,3]
e = q.peek(); //e = 1
q' = q.deQueue();
q' = [2,3] 


---
Hoare Logic
- Automatic way to *verify* that an implementation satisfies a given specification (pre/post conditions)
- Imperative programs (the version I am showing you does not deal with advanced OO concepts, no inheritence, no pointers/references)
- 


Hoare Tripple
{P} S {Q}
{P} : precondition  (e.g.,  0 < x < 5)
{Q} : postcondition  (e.g.,  output = x * 2)
S   : your program (a list of statements)  (e.g., [int y = x * 2; return y;])

Goal: verify that executing S under the assumption that P holds will result in Q (satisfies Q).

If this goal is met, then S is correct wrt to P and Q.

*Partial correctness*:  also assuming that S will terminate  **
Total correctness: does not make the assumption that S will terminate (halting problem)

:= assignment


{True} x := 5 {x==5 or x== 6 or x > 6}  ... valid
{True} x := 5 {x>1}  ... valid
{True} x := 5 {x==5}  ... valid  (preferred, strongest)

{True} x := 5 {x>5}  ... invalid ,  S is INCORRECT wrt P and Q.


<2022-01-31 Mon>

- Specification/Contract of a program

  #+begin_src java
    int add2numbers(int x, int y){
        //requires/preconditions
        //- x and y are integers

        //effects/postconditions
        //- z is integer
        //- z = x + y
        return z;
    }
  #+end_src

  #+begin_src

    List sortAscending(List<Int> l){
       //preconds:  l is a list of integers 
       //l cannot be null
       //l cannot contain null

       //postconditions:
       - l' has an ascending order 
       - l' is a permutation of l
       return l';
    }
  #+end_src


#+begin_src java
  User u = new User(“SWE619”);
  u.equals(u); // contract: T, impl: T
  u.equals(null); //contract: F, impl: F
  u.equals("SWE619"); //contract: F, impl: F

  User v = new User(null);
  v.equals(u); //contract:F, impl: F
  u.equals(v); //contract:F, impl: exception
  
#+end_src


testing vs verfication
- testing:  test if the program works over a *finite* number of inputs
- verification: formally/mathematically show/guarantee that a program works over *all possible* inputs
  - Nasa rovers
  - A318: formally proved that no floating pt errs
  - robotic surgical arms



Precondition (P):
  - client/customer: establish  P
Postcondition (Q)
  - developer/implementation:  establish Q under assumption that P is established


- If a program is not correct
  - if precondition is wrong: blame client
  - if (precondition is met) postcondition is wrong: blame developer


- sqrt example  :  y = sqrt(x)
  preconditions:
  - x > 0 (preferred)
  - x >= 0 (preferred)
  - x is an integer (preferred)
  - 100 <= x  <= 200  (not preferred)
  - x = 101  (not preferred)

  - best precondition: no precondition
  
  postconditions:
  - y is a number
  - y <= x
  - y*y == x (-/+ epsilon)   ~~ y = x/y  (preferred)



- partial vs total specification
  - partial specification:  has a precondition
  - total specification:  has NO precondition

- how to turn a partial into a total specification?
  //partial spec
  sqrt(x):
     precondition: x >= 0
     postcondition:  y*y == x (-/+ epsilon)

  //total spec
  sqrt(x):
     precondition: 
     postcondition:
         //if x < 0:  raise exception
         //ow.  y*y == x (-/+ epsilon)

  //div_xy(x,y):   output = x/y
  partial spec:
   precond:  y != 0
   post :   y*output == x

  total spec:
    precond: true
    postcondition:   if y is 0, raise exception(DivByZero);
    y*output = 



list = null,  NPE
list = [], IOBE
list = [1], []  *
list = [1,2,3] , [2,3] *

pre: non-empty list and non-null
post: remove the head, return the rest (tail)

//total
pre: 
post:
if  (list is []) throw IOBE
if (list is null) throw NPE
remove the head, return the rest (tail)

specification too specific to implentation (remove(0)), to fix: throws IAE instead of IOBE when list is []

<2022-01-24 Mon>

What does it mean to write correct software?
- It conforms to some expectation (software contracts or specificaions)
- Should pass its testsuite  ..
- Should not have exception or performance issues


- Specifications/contracts (requirements)
- Should not have exception or error

- Performance, maintainable, expandable :  desired qualities , but not
required for *correctness*


f (x, y):   // return output = x  / y
   //precond:  x,y are reals

  if y == 0:  raise exception
  ...



preconditions
- x,y are reals
- y != 0
- x >= 0
- x >=  100
- we want preconditions are are as WEAK as possible
   1. x could be any real numbers
   2. x must be non-negative
   3. x must be >= 100

3 is stronger than 2 is stronger 1
the best precondition is the weakest one, i.e., TRUE  (the function
has no assumption on the input)


- output : number
- output ~   x /y    (output * y   ~= x)

- precondition/requirements:  a condition over the inputs ,
assumptions that we make when the function starts
   - x,y being real numbers
   - y != 0

- postcondition/behaviors:  behavior of the function (the program),
relationshp btw inputs and outputs

   1. output is a number (reals,... )     weaker
   2. output * y ~= x                     stronger

   the best postcondition is the strongest one,  i.e.,   output * y ~= x

- side-effects:
   - can change input X, ....


task: sorting a list of numbers in ascending order  (e.g., 1,5,10,...)

g(l):
  //precondition: a list of numbers
  //same data types (comparable)
  //iterable ...
  //finite

  // l is arraylist of integers
  // precondition over l:   none,  true

   postcondition:
   - |l| == |l'|
   - l' same datatype  as l
   - [1,2,1,2]   [1,1,1,2]
   - l' is a permutation of l
   - l' ascending order


 //sort l in ascending order
 return l'




type checking

- void f (int x, int y){
   int o = 3;
   return o;
}

- type-checker is light-weight analysis and therefore can be built in in comilers,  just check if x and y are integers 
- assertion checking is heavy-weight because we can check expressive properties such as y = x ** 2; never built in, have to do some serious program analysis for this.
assertion(y = x**2);
* 
