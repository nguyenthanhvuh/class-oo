#+TITLE: SWE 619 Course Schedule and Assignments

#+OPTIONS: ^:nil toc:1

#+HTML_HEAD: <link rel="stylesheet" href="https://nguyenthanhvuh.github.io/files/org.css">
#+HTML_HEAD: <link rel="alternative stylesheet" href="https://nguyenthanhvuh.github.io/files/org-orig.css">


* Reflections

** Reading 1
   + List the names of students in your group.
   + Did everyone in your group contribute to the discussion of your solutions to this reading quiz? If not, who did not?
   + Much of the material explores the connection between preconditions and exception handling. Were there any aspects of this connection that surprised or confused anyone in your group? If so, explain. If not, where did you learn this material?
   + Liskov and Bloch have different advice with respect to checked vs. unchecked exceptions. Which approach do you find more persuasive, and why?
   + Preconditions are often characterized as "bad" from a security perspective. If you think you know why this is, please explain. If you are unsure, say so and try to explain why the you find the connection between preconditions and security confusing.

** Reading 2
   List the names of students in your group.
   Did everyone in your group contribute to the discussion of your solutions to this reading quiz? If not, who did not?
   If you sat down to design a new class, would the result likely be mutable or immutable? Why?
   In her presentation, Liskov doesn't cover all the requirements for immutability. (In fairness, these requirements weren't well understood at the time she wrote her text.) Do you know what she's missing and why it's important? If so, briefly explain. (We'll cover those requirements later in the semester.)
   Based on your experience, what do you think the major advantage is of
   immutability over mutability?
   mutability over immutability?


** Reading 3
   List the names of students in your group.
   Did everyone in your group contribute to the discussion of your solutions to this reading quiz? If not, who did not?
   Have you ever explicitly considered invariants when deciding how to implement a Java class? If so, can you give an example?
   Please explain what you think it means to to correctly override the toString() method. Base your answer on your understanding *before* enrolling in SWE 619.
   How do you decide whether you have implemented a Java method correctly? Again, base your answer on your understanding *before* enrolling in SWE 619.


** Reading 4
   List the names of students in your group.
   Did everyone in your group contribute to the discussion of your solutions to this reading quiz? If not, who did not?
   Iteration is a basic concept, yet Liskov devotes an entire chapter to it. What, if anything, did you find in Liskov's presentation of iteration abstraction that is new to you?
   Defensive copies are an important, yet error-prone, obligation of using mutable objects in a public setting. Was there anything about Bloch's discussion that you found confusing? (Note that I have posted a video for Bloch Item 50 on the course schedule page.)
   Bloch's Period class (Item 50) has a lot going on in it. We'll revisit the this example in an in-class exercise. What, if anything, did you find confusing in this example?



** Reading 5
   List the names of students in your group.
   Did everyone in your group contribute to the discussion of your solutions to this reading quiz? If not, who did not?
   Liskov 7 develops rules for assessing the correctness of subtypes. What do you think the connection is between these rules and the rules for verification addressed in Chapter 5?
   In-class exercise 5C goes through a concrete exercise from Liskov. Which aspects of this of this exercise are clear, and which aspects are confusing?
   Consider the Java Set interface and two subtypes: HashSet and TreeSet. Do you think the abstract state for these three interfaces/classes are identical or different? (You might want to spend some time in the JavaDoc before jumping to a conclusion; there is a specific answer in there!)



** Reading 6
   List the names of students in your group.
   Did everyone in your group contribute to the discussion of your solutions to this reading quiz? If not, who did not?
   Can you explain why Java has both a Comparable interface and a Comparator interface?
   How familiar is your group with the Java "anonymous class" and "lambda" constructs?
   Can you explain the connection between anonymous classes and lambda expressions?



** Reading 7

   List the names of students in your group.
   Did everyone in your group contribute to the discussion of your solutions to this reading quiz? If not, who did not?
   Can you explain the basic role of generics in the Java language?
   Do you have experience generifying Java classes? Explain.
   Bloch explains how bounded wildcards can address certain limitations in the use of generics in inheritance settings. If you can, give a brief description of how this works. (If not, that's fine; we'll address in class.)


** Reading 8

   List the names of students in your group.
   Did everyone in your group contribute to the discussion of your solutions to this reading quiz? If not, who did not?
   Have you overridden the equals() or the hashCode() methods? In light of Bloch's discussion of both methods, do you think your implementations were correct?
   Have you overridden the clone() method? Do you understand why inheritance is a particular concern for overridding this method?
   What similarities and differences do you see between how Liskov and Bloch treat the toString() method?


** Reading 9
   List the names of students in your group.
   Did everyone in your group contribute to the discussion of your solutions to this reading quiz? If not, who did not?
   What is your comfort level with "regular" logic? What aspect of using logic do you find most challenging?
   Do you have any experience learning and/or using temporal logic?
   How familiar/comfortable are you with finite state machines?



** Reading 10
   List the names of students in your group.
   Did everyone in your group contribute to the discussion of your solutions to this reading quiz? If not, who did not?
   Bloch discusses specific rules for making a class immutable. Did you find any of these rules confusing?
   Bloch's InstrumentedHashSet example demonstrates how inheritance can break encapsulation. Does the JavaDoc for HashSet, Set and/or Collection follow the Bloch's Item 19 advice for documenting for inheritances?
   Bloch's InstrumentedSet example has a lot going on in it. What aspects, if any, of this example did you find confusing?



** Reading 11

   List the names of students in your group.
   Did everyone in your group contribute to the discussion of your solutions to this reading quiz? If not, who did not?
   How would you rate your experience with writing (ordinary) tests in the JUnit framework? Use a scale from "A few times for class" to "I do that professionally".
   JUnit theories are the JUnit implementation of "property-based" testing. Have you every written a property-based test?
   JUnit theories are included on the syllabus because they show how the precondition/postcondition model applies beyond method contracts. Does the pre/post model for JUnit theories make sense to you?



** Reading 12

   List the names of students in your group.
   Did everyone in your group contribute to the discussion of your solutions to this reading quiz? If not, who did not?
   Is there anything about property based testing that you still find confusing?
   Have you ever used a "C style" enum? If so, at the time, did this seem reasonable or ridiculous?
   This week's in-class exercise is a recap. Is there a topic (or two) we've covered that you think you need more practice with?


