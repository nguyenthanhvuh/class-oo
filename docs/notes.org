<2021-08-26 Thu>

Precondition: weakest is best,  nothing (i.e., True) is even better

-----


- turn on recording

- introducing myself (in NE, taught compilers etc)

- SCHEDULE
  - give plenty of time to read the assignment,  might have few pages, but lots of stuff in there


** <2021-08-23 Mon>
   - Correctness:
     -- specification  or contract ...
     -- code is correct if it satisfies the contract
     -- if you give it no contract, well then anything would be correct
     -- so you want strong and precise contract

     
     
   - Pre/Post conditions

   - sort list  : 
     - preconds:  input is a list of *comparable* items
     - postcond:
       - output is sorted
       - output is a permutation of data input






   - =void remove()=
     Removes from the underlying collection the last element returned by this iterator (optional operation). This method can be called only once per call to next(). The behavior of an iterator is unspecified if the underlying collection is modified while the iteration is in progress in any way other than by calling this method.

   Throws:
   - UnsupportedOperationException - if the remove operation is not supported by this iterator
   - IllegalStateException - if the next method has not yet been called, or the remove method has already been called after the last call to the next method


   List<String>l = ... // [cat, dog, mouse]
   Iterator<String> itr = l.iterator();

   itr.next();    // cat
   itr.next(); // dog


   itr.next();  // cat
   l.add("elephant");
   itr.next();  // anything can happen, depends on Java implementation,  probably return an exception (Concurrent modification)

* INCLASs object   
  - Group break out , do in-class ,  45 mins
  - turn recording OFF

  - after break,  turn on recording



- Talk about compilers if have time   
